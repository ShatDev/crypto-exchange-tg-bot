from random import randint
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from kb import inl_currencies_bep
from data_base import sql_add_bsc_data, sql_update_bsc_status
import requests
from bot_create import path
from handler import user
from config import bep_dict
from kb import inl_currencies_bep_rec, yn_bep, menu, sent_bsc, received_bsc


# —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    currency = State()
    currency_receive = State()
    wallet = State()
    amount_state = State()
    amount_receive_state = State()
    status_p = State()
    number_p = State()


# –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ (–æ—Ç–¥–∞—Ç—å)
async def bep_currencies_exc(callback: types.CallbackQuery):
    await Form.currency.set()
    await callback.message.edit_caption('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–¥–∞—ë—Ç–µ (<b>BSC</b>):', reply_markup=inl_currencies_bep)

# –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞(–ø–æ–ª—É—á–∏—Ç—å)
async def want_exch_bep(callback: types.CallbackQuery, state: FSMContext):
    global sending_token_bep
    sending_token_bep = callback.data.replace('_bep_e', '')
    if sending_token_bep == 'usdt':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ USDT (<b>—Å–µ—Ç—å BSC</b>)\n{"-" * 28}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ', reply_markup=inl_currencies_bep_rec)
    if sending_token_bep == 'busd':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ BUSD (<b>—Å–µ—Ç—å BSC</b>)\n{"-" * 28}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ', reply_markup=inl_currencies_bep_rec)
    if sending_token_bep == 'eth':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ Ethereum (<b>—Å–µ—Ç—å BSC</b>)\n{"-" * 28}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ (SOL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)', reply_markup=inl_currencies_bep_rec)
    if sending_token_bep == 'ltc':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ Litecoin (<b>—Å–µ—Ç—å BSC</b>)\n{"-" * 33}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ', reply_markup=inl_currencies_bep_rec)
    if sending_token_bep == 'sol':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ Solana (<b>—Å–µ—Ç—å BSC</b>)\n{"- "*30}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ', reply_markup=inl_currencies_bep_rec)
    if sending_token_bep == 'xrp':
        await callback.message.edit_caption(f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ XRP (<b>—Å–µ—Ç—å BSC</b>)\n{"- "*27}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ', reply_markup=inl_currencies_bep_rec)
    async with state.proxy() as data:
        data['currency'] = sending_token_bep.upper()
    await Form.next()


# –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ –∏ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
async def bep_currencies_rec(callback: types.CallbackQuery, state: FSMContext):
    global tkn_rec_bep
    tkn_rec_bep = callback.data.replace('_bep_rec', '')
    if tkn_rec_bep != sending_token_bep:
        async with state.proxy() as data:
            data['currency_receive'] = tkn_rec_bep.upper()
        await Form.next()
        await callback.message.edit_caption('''
–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (<b>BEP20</b>)
–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å?\n
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: <b>0x123F34c4562D756907db2fb5304B52BdcA356367</b>
''')
    else:
        await callback.message.edit_caption('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –æ–±–º–µ–Ω—è—Ç—å –¥–≤–∞ –æ–¥–∏–Ω–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', reply_markup=menu)
        await state.finish()


# –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤–≤–æ–¥ –∫–æ–ª-–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def addresss_bep(message: types.Message, state: FSMContext):
    global addr, am_rec
    addr = message.text 
    async with state.proxy() as data:
        data['wallet'] = message.text
    await Form.next() 
    await message.answer_photo(user.photo1, f'''
–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å\n{"-" * 40}
<i>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 {sending_token_bep.upper()} = {(am_rec := requests.get(url=f'https://min-api.cryptocompare.com/data/price?fsym={sending_token_bep}&tsyms={tkn_rec_bep}{path}').json()[tkn_rec_bep.upper()])} {tkn_rec_bep.upper()}</i>'''
    )


# –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª-–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def amount_bep(message: types.Message, state: FSMContext):
    global amount_bep_var
    amount_bep_var = float(message.text)
    async with state.proxy() as data:
        data['amount_state'] = amount_bep_var
    await Form.next()
    async with state.proxy() as data:
        data['amount_receive_state'] = float(am_rec) * amount_bep_var
    await message.answer_photo(user.photo1, f'''
–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è: <b>{addr}</b>\n{"-" * 16}
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: <b>{amount_bep_var} {sending_token_bep.upper()}</b>
–ü–æ–ª—É—á–∞–µ—Ç–µ: <b>{amount_bep_var * float(am_rec)} {tkn_rec_bep.upper()}</b>
–°–µ—Ç—å: <b>BSC</b>
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.''', reply_markup=yn_bep
)
    await Form.next()


# —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def info_bep(callback: types.CallbackQuery, state: FSMContext):
    global numb
    await callback.message.answer_photo(user.photo1, f'''
–ó–∞—è–≤–∫–∞ ‚Ññ <code>{(numb := str(randint(1, 100)) + str(callback.from_user.id))}</code> —Å–æ–∑–¥–∞–Ω–∞\n{"-" * 40}
–û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount_bep_var} {sending_token_bep.upper()} –Ω–∞ –∞–¥—Ä–µ—Å
<code>{bep_dict[sending_token_bep][0]}</code>''', reply_markup=sent_bsc
    )
    async with state.proxy() as data:
        data['status_p'] = '—Å–æ–∑–¥–∞–Ω–∞'
    await Form.next()

    async with state.proxy() as data:
        data['number_p'] = numb
    await sql_add_bsc_data(state)
    await state.finish()


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–∫–∏ (–æ—Ç–º–µ–Ω–∞, –æ–ø–ª–∞—á–µ–Ω–∞)
async def sent_money_bep(callback: types.CallbackQuery):
    if callback.data == 'sent_bsc':
        await sql_update_bsc_status('–æ–ø–ª–∞—á–µ–Ω–∞', addr, numb)
        await callback.message.edit_caption('<b>–û—Ç–ª–∏—á–Ω–æ. –ü–ª–∞—Ç—ë–∂ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç üïõ</b>', reply_markup=received_bsc)
    else:
        await sql_update_bsc_status('–æ—Ç–º–µ–Ω–µ–Ω–∞', addr, numb)
        await callback.message.edit_caption('<b>–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω</b>', reply_markup=menu) 


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–≤–æ–¥–æ–º –∏–Ω–ª. –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
async def received_money_bep(callback: types.CallbackQuery):
    if callback.data == 'received_bsc':
        await sql_update_bsc_status('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞', addr, numb)
        await callback.message.edit_caption(f'''
–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ
{"-" * 40}\n
<b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üíü</b>''', reply_markup=menu)


# —Ö—ç–Ω–¥–ª–µ—Ä—ã
def register_addramount_bep(dp: Dispatcher):
    dp.register_callback_query_handler(bep_currencies_exc, text='bep20', state=None)
    dp.register_callback_query_handler(want_exch_bep, Text(endswith='_bep_e'), state=Form.currency)
    dp.register_callback_query_handler(bep_currencies_rec, Text(endswith='_bep_rec'), state=Form.currency_receive)
    dp.register_message_handler(addresss_bep, Text(startswith='0x'), state=Form.wallet)
    dp.register_message_handler(amount_bep, state=Form.amount_state)
    dp.register_callback_query_handler(info_bep, text='yes_bep', state=Form.status_p)
    dp.register_callback_query_handler(info_bep, text='menu')
    dp.register_callback_query_handler(sent_money_bep, text='sent_bsc')
    dp.register_callback_query_handler(sent_money_bep, text='cancel_bsc')
    dp.register_callback_query_handler(received_money_bep, text='received_bsc')